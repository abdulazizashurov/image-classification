{"version":3,"sources":["components/Classifier/Classifier.js","App.js","reportWebVitals.js","index.js"],"names":["Classifier","state","files","isLoading","errorMessage","resentImage","onDrop","setState","loadImage","setTimeout","console","log","formData","FormData","append","name","axios","post","headers","catch","err","message","activateSpinner","deactivateSpinner","sendImage","then","resp","getImageClass","obj","get","data","id","this","map","file","size","accept","isDragActive","getRootProps","getInputProps","className","style","fontSize","Alert","variant","length","Button","onClick","Spinner","animation","role","Fragment","classified","href","Image","src","picture","height","rounded","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67a3daf1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Dropzone from 'react-dropzone';\nimport './Classifier.css'\nimport {Spinner, Button,Alert,Image} from 'react-bootstrap'\nimport axios from 'axios'\n\n\nexport default class Classifier extends Component {\n    state={\n        files: [],\n        isLoading: false,\n        errorMessage:'',\n        resentImage:null\n    }\n\n\n    onDrop = (files) =>{\n        this.setState({files:[],isLoading:true,resentImage:null})\n        this.loadImage(files)\n    }\n    loadImage = (files)=>{\n        setTimeout(()=>{\n            this.setState({\n                files,\n                isLoading:false\n            },()=>{\n                console.log(this.state.files)\n                let formData = new FormData()\n                formData.append('picture', this.state.files[0],this.state.files[0].name)\n                axios.post('http://localhost:8000/api/images/',formData,{\n                    headers:{\n                        'accept':'application/json',\n                        'content-type':'multipart/form-data'\n                }\n        })\n        .catch(err=>{\n            this.setState({errorMessage:err.message})\n        })\n\n            }\n            )  \n        },1000);\n    }\n    activateSpinner = ()=>{\n        this.setState({files:[],isLoading:true})\n    }\n    deactivateSpinner = ()=>{\n        this.setState({isLoading:false})\n    }\n\n    sendImage = ()=>{\n        this.activateSpinner()\n        let formData = new FormData()\n        formData.append('picture', this.state.files[0],this.state.files[0].name)\n        axios.post('http://localhost:8000/api/images/',formData,{\n            headers:{\n                'accept':'application/json',\n                'content-type':'multipart/form-data'\n            }\n        }).then(resp=>{\n            this.getImageClass(resp)\n        }).catch(err=>{\n            this.setState({errorMessage:err.message})\n        })\n\n        \n    }\n\n    getImageClass = (obj)=>{\n        axios.get(`http://localhost:8000/api/images/${obj.data.id}/`,{\n            headers:{\n                'accept':'application/json',\n            }\n        })\n        .then(resp=>{\n            this.setState({resentImage:resp})\n        })\n        .catch(err=>{\n            this.setState({errorMessage:err.message})\n        })\n        this.deactivateSpinner()\n    }\n\n\n    render() {\n        const files = this.state.files.map(file => (\n            <li key={file.name}>\n              {file.name} - {file.size} bytes\n            </li>\n          ));\n        return (\n            <div>\n                <Dropzone onDrop={this.onDrop}  accept='image/png, image/jpeg'>\n                    {({isDragActive, getRootProps, getInputProps}) => (\n                    <section className=\"container\">\n                        <div {...getRootProps({className: 'dropzone back'})}>\n                        <input {...getInputProps()} />\n                        <i className='far fa-image mb-2 text-muted' style={{fontSize:100}}></i>\n                        <p className='text-muted'>{isDragActive ? \"Rasim yuklanmoqda\" :\"Bironta rasim yuklang\"}</p>\n                        </div>\n                        <aside>\n                        {files}\n                        </aside>\n                        {this.state.errorMessage && (\n                            <Alert variant='danger'>\n                                {this.state.errorMessage}\n                            </Alert>\n                        )}\n                       \n\n                        {this.state.files.length > 0 && (\n                            <Button variant='info' className='mt-4' size='lg' onClick={this.sendImage}>Yubormoq</Button>\n                        )}\n                        {this.state.isLoading && (\n                            <Spinner animation=\"border\" role=\"status\">\n                                <span className=\"visually-hidden\"></span>\n                            </Spinner>\n                        )}\n                        {this.state.resentImage &&(\n                            <React.Fragment>\n                                <Alert variant='primary'>\n                                Javob:  {this.state.resentImage.data.classified}\n                                </Alert>\n                                {\n                                <Alert variant='info'>\n                                    <a  href={`https://www.google.com/search?q=${this.state.resentImage.data.classified}`}>{this.state.resentImage.data.classified} nima ?</a>\n                                </Alert> }\n\n                                <Image className='justify-content-center' src={this.state.resentImage.data.picture} height='200' rounded />\n                            </React.Fragment>\n                        )}\n                        \n                    </section>\n                    )}\n                </Dropzone>\n            </div>\n        )\n    }\n}\n\n","import './App.css';\nimport Classifier from './components/Classifier/Classifier';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Classifier />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}